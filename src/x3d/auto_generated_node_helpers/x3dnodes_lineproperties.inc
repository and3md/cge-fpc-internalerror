{ -*- buffer-read-only: t -*-

  Copyright 2015-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetApplied: boolean;
    procedure SetApplied(const Value: boolean);
    function GetLinewidthScaleFactor: Single;
    procedure SetLinewidthScaleFactor(const Value: Single);
  public
    { X3D field "applied". } { }
    property Applied: boolean read GetApplied write SetApplied;
    { X3D field "linewidthScaleFactor". } { }
    property LinewidthScaleFactor: Single read GetLinewidthScaleFactor write SetLinewidthScaleFactor;

{$endif read_interface}

{$ifdef read_implementation}

{ TLinePropertiesNode ----------------------------------------------- }

function TLinePropertiesNode.GetApplied: boolean;
begin
  Result := FdApplied.Value;
end;

procedure TLinePropertiesNode.SetApplied(const Value: boolean);
begin
  FdApplied.Send(Value);
end;

function TLinePropertiesNode.GetLinewidthScaleFactor: Single;
begin
  Result := FdLinewidthScaleFactor.Value;
end;

procedure TLinePropertiesNode.SetLinewidthScaleFactor(const Value: Single);
begin
  FdLinewidthScaleFactor.Send(Value);
end;

{$endif read_implementation}
