{ -*- buffer-read-only: t -*-

  Copyright 2015-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetEnabled: boolean;
    procedure SetEnabled(const Value: boolean);
    function GetFractionIncreasing: boolean;
    procedure SetFractionIncreasing(const Value: boolean);
  public
    { X3D field "enabled". } { }
    property Enabled: boolean read GetEnabled write SetEnabled;
    { X3D field "fractionIncreasing". } { }
    property FractionIncreasing: boolean read GetFractionIncreasing write SetFractionIncreasing;

{$endif read_interface}

{$ifdef read_implementation}

{ TTimeSensorNode ----------------------------------------------- }

function TTimeSensorNode.GetEnabled: boolean;
begin
  Result := FdEnabled.Value;
end;

procedure TTimeSensorNode.SetEnabled(const Value: boolean);
begin
  FdEnabled.Send(Value);
end;

function TTimeSensorNode.GetFractionIncreasing: boolean;
begin
  Result := FdFractionIncreasing.Value;
end;

procedure TTimeSensorNode.SetFractionIncreasing(const Value: boolean);
begin
  FdFractionIncreasing.Send(Value);
end;

{$endif read_implementation}
