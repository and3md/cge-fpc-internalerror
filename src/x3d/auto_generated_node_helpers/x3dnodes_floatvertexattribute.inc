{ -*- buffer-read-only: t -*-

  Copyright 2015-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetNumComponents: Integer;
    procedure SetNumComponents(const Value: Integer);
  public
    { Set X3D field "value". } { }
    procedure SetValue(const Value: array of Single);
    { Set X3D field "value". } { }
    procedure SetValue(const Value: TSingleList);
    { X3D field "numComponents". } { }
    property NumComponents: Integer read GetNumComponents write SetNumComponents;

{$endif read_interface}

{$ifdef read_implementation}

{ TFloatVertexAttributeNode ----------------------------------------------- }

procedure TFloatVertexAttributeNode.SetValue(const Value: array of Single);
begin
  FdValue.Send(Value);
end;

procedure TFloatVertexAttributeNode.SetValue(const Value: TSingleList);
begin
  FdValue.Send(Value);
end;

function TFloatVertexAttributeNode.GetNumComponents: Integer;
begin
  Result := FdNumComponents.Value;
end;

procedure TFloatVertexAttributeNode.SetNumComponents(const Value: Integer);
begin
  FdNumComponents.Send(Value);
end;

{$endif read_implementation}
