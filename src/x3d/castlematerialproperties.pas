{
  Copyright 2007-2018 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Material and texture properties from external files (TMaterialProperty,
  global MaterialProperties collection). }
unit CastleMaterialProperties;

{$I castleconf.inc}

interface

uses Classes, DOM, Generics.Collections;

type

  TAutoGeneratedTextures = class
  strict private
    FAutoProcessImageURLs: boolean;
    { necessary for Exclude with relative dirs, like "entites/*", to work }
    FBaseURL: string;
    FSmallestScale: Cardinal;
    procedure LoadImageEvent(var URL: string);
    function IsAbsoluteURLMatchingRelativeMask(const URL, Mask: string): boolean;
  public
    constructor Create(const Element: TDOMElement; const BaseURL: string; const AnAutoProcessImageURLs: boolean);
    destructor Destroy; override;
    function TextureURLMatches(const URL: string): boolean;
    property SmallestScale: Cardinal read FSmallestScale;
  end;

  TAutoGeneratedTexturesList = {$ifdef CASTLE_OBJFPC}specialize{$endif} TObjectList<TAutoGeneratedTextures>;

implementation

uses SysUtils, StrUtils, Math,
  X3DNodes;

{ TAutoGeneratedTextures -------------------------------- }

constructor TAutoGeneratedTextures.Create(
  const Element: TDOMElement; const BaseURL: string;
  const AnAutoProcessImageURLs: boolean);
begin
  inherited Create;
  FAutoProcessImageURLs := AnAutoProcessImageURLs;
  FBaseURL := BaseURL;

  { read from XML }
end;

destructor TAutoGeneratedTextures.Destroy;
begin
  inherited;
end;

function TAutoGeneratedTextures.IsAbsoluteURLMatchingRelativeMask(
  const URL, Mask: string): boolean;
var
  U: string;
begin
  U := URL;
  Result := IsWild(U, Mask, true);
end;

function TAutoGeneratedTextures.TextureURLMatches(const URL: string): boolean;

  { Check is URL not excluded. }
  function CheckNotExcluded: boolean;
  begin
    Result := true;
  end;

begin
  Result := false;
end;

procedure TAutoGeneratedTextures.LoadImageEvent(
  var URL: string);

  { Texture has GPU-compressed and/or downscaled counterpart, according to include/exclude
    variables. So try to replace URL with something compressed and downscaled. }
  procedure ReplaceURL;
  var
    Scale: Cardinal;
  begin
    { Do not warn about it, just as we don't warn when TextureLoadingScale = 2
      but we're loading image not mentioned in <auto_generated_textures>.
    if TextureLoadingScale > SmallestScale then
      raise Exception.CreateFmt('Invalid TextureLoadingScale %d, we do not have such downscaled images. You should add or modify the <scale smallest=".." /> declaration in "material_properties.xml", and make sure thar you load the "material_properties.xml" early enough.',
        [TextureLoadingScale]); }
    Scale := Min(SmallestScale, 1);

  end;

begin
  if TextureURLMatches(URL) then
    ReplaceURL;
end;


end.
